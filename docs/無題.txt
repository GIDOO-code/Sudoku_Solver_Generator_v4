public partial class NiceLoopGen: AnalyzerBaseV2{
    private int GStageMemo;
    private int S=1;
    public  int NiceLoopMax{ get{ return GNPXApp000.GMthdOption[&quot;NiceLoopMax&quot;].ToInt(); } }
    public NiceLoopGen( GNPX_AnalyzerMan pAnMan ): base(pAnMan){ }
    private void Prepare(){
        if(pAnMan.GStage!=GStageMemo) {
            GStageMemo=pAnMan.GStage;
            CeLKMan.Initialize();
            CeLKMan.PrepareCellLink(1+2);
        }      
    }
    public bool NiceLoop( ){  //Depth-first Search
        Prepare();
        CeLKMan.PrepareCellLink(1+2);    //Generate StrongLink,WeakLink
        for( int szCtrl=4; szCtrl&lt;NiceLoopMax; szCtrl++ ){
            foreach( var P0 in pBDL.Where(p=&gt;(p.No==0)) ){                      //Origin Cell
                foreach( var no in P0.FreeB.IEGet_BtoNo() ){                    //Origin Number
                    foreach( var LKH in CeLKMan.IEGetRcNoType(P0.rc,no,3) ){    //First Link
                        if( pAnMan.CheckTimeOut() ) return false;
                        var SolStack=new Stack&lt;UCellLink&gt;();
                        SolStack.Push(LKH);                 
                        Bit81 UsedCells=new Bit81(LKH.rc2);                     //Bit Representation of Used Cells
                        _NL_Search(LKH,LKH,SolStack,UsedCells,szCtrl-1);
                        if(SolCode&gt;0) return true;
                    }
                }
            }
        }
        return false;
    }
    private bool _NL_Search( UCellLink LK0, UCellLink LKpre, Stack&lt;UCellLink&gt; SolStack, Bit81 UsedCells, int szCtrl ){
        if( szCtrl&lt;=0 ) return false;
        foreach( var LKnxt in CeLKMan.IEGet_CeCeSeq(LKpre) ){   //links that satisfy concatenation conditions
            int rc2Nxt = LKnxt.rc2;
            if( UsedCells.IsHit(rc2Nxt) ) continue;             //UsedCells does not include Origin Cell
            { //===== Chain Search =====
                SolStack.Push(LKnxt);  
                //___Debug_Print_NLChain(SolStack);
                if( rc2Nxt==LK0.rc1 && szCtrl==1 ){
                    if( SolStack.Count&gt;2 ){                     //Loop was formed (the next cell matches the Origin Cell)
                        int SolType=_NL_CheckSolution(LK0,LKnxt,SolStack,UsedCells);//Solved?
                        if( SolType&gt;0 ){          
                            .
                            . (Solution report code)
                            .
                            return true;
                        }
                    }
                }
                else{
                    Bit81 UsedCellsNxt = UsedCells|(new Bit81(rc2Nxt));   //Create a new bit representation of used cell
                    _NL_Search(LK0,LKnxt,SolStack,UsedCellsNxt,szCtrl-1); //Next step Search(recursive call
                    if(SolCode&gt;0 ) return true;
                }
                SolStack.Pop();                                           //Failure(Cancel link extension processingÅj
            } //-----------------------------
        }  
        return false;
    }
    private int _NL_CheckSolution( UCellLink LK0, UCellLink LKnxt, Stack&lt;UCellLink&gt; SolStack, Bit81 UsedCells ){ 
        bool SolFond=false;
        int SolType = CeLKMan.Check_CellCellSequence(LKnxt,LK0)? 1: 2; //1:Continuous 2:DisContinuous
        if(SolType==1){ //===== continuous =====
            //=== Change WeakLink to StrongLink
            List&lt;UCellLink&gt; SolLst=SolStack.ToList();
            Bit81 UsedCellsT = UsedCells|(new Bit81(LK0.rc1));
            foreach( var L in SolLst ){
                int noB=1&lt;&lt;L.no;
                foreach( var P in pBDL.IEGetCellInHouse(L.tfx,noB) ){
                    if( UsedCellsT.IsHit(P.rc) ) continue;
                    P.CancelB |= noB;
                    SolFond=true;
                }
            }
            //=== S-S (There are no other numbers)
            SolLst.Reverse();
            SolLst.Add(LK0);                           
            var LKpre=SolLst[0];
            foreach( var LK in SolLst.Skip(1) ){
                if( LKpre.type==1 && LK.type==1 ){ //S-S
                    UCell P=pBDL[LK.rc1];
                    int noB = P.FreeB.DifSet((1&lt;&lt;LKpre.no)|(1&lt;&lt;LK.no));
                    if( noB&gt;0 ){ P.CancelB=noB; SolFond=true; }
                }
                LKpre=LK;
            }
            if(SolFond) SolCode=2;
        }
        else if(SolType==2){ //===== discontinuous =====
            int dcTyp= LK0.type*10+LKnxt.type;
            UCell P=LK0.UCe1;
            switch(dcTyp){
                case 11: 
                    P.FixedNo=LK0.no+1; //Cell number determination
                    P.CancelB=P.FreeB.DifSet(1&lt;&lt;(LK0.no));
                    SolCode=1; SolFond=true; //(1:FixedÅj
                    break;
                case 12: P.CancelB=1&lt;&lt;LKnxt.no; SolCode=2; SolFond=true; break;//(2:Exclude from candidatesÅj
                case 21: P.CancelB=1&lt;&lt;LK0.no; SolCode=2; SolFond=true; break;
                case 22: 
                    if( LK0.no==LKnxt.no ){ P.CancelB=1&lt;&lt;LK0.no; SolFond=true; SolCode=2; }
                    break;
            }
        }
        if(SolFond){ return SolType; }
        return -1;
    }
}